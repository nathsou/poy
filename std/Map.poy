import Iterator

#new("Map")
declare fun initMap(): Map<_, _>

#new("Map")
declare fun initMapFromEntries<k, v>(entries: Iterator<(k, v)>): Map<k, v>

pub extend<k, v> Map<k, v> {
    declare {
        let size: Num
        fun clear(): ()
        fun delete(key: k): ()
        fun entries(): Iterator<(k, v)>
        fun forEach(f: (v, k) -> ()): ()
        fun get(key: k): v
        fun has(key: k): Bool
        fun keys(): Iterator<k>
        fun set(key: k, value: v): ()
        fun values(): Iterator<v>
    }

    static fun init(): Self {
        initMap()
    }

    static fun fromEntries(entries) {
        initMapFromEntries(entries)
    }

    fun map<k2, v2>(f: (k, v) -> (k2, v2)): Map<k2, v2> {
        initMapFromEntries(self.entries().map(kv -> f(kv.0, kv.1)))
    }

    fun mapKeys<k2>(f: (k, v) -> k2): Map<k2, v> {
        initMapFromEntries(self.entries().map(kv -> {
            let k = kv.0
            let v = kv.1
            let k2 = f(k, v)

            (k2, v)
        }))
    }

    fun mapValues<v2>(f: (k, v) -> v2): Map<k, v2> {
        initMapFromEntries(self.entries().map(kv -> {
            let k = kv.0
            let v = kv.1
            let v2 = f(k, v)

            (k, v2)
        }))
    }

    fun groupBy<k2>(f: v -> k2): Map<k2, v[]> {
        mut grouped = Map<_, _>()

        for pair in self.entries() {
            let key = pair.0
            let val = pair.1
            let k = f(key)

            if grouped.has(k) {
                mut group = grouped.get(k)
                group.push(val)
            } else {
                grouped.set(k, [val])
            }
        }

        grouped
    }
}

pub extend <k, e> Map<k, e[]> {
    mut fun push(key, elem) {
        if self.has(key) {
            mut arr = self.get(key)
            arr.push(elem)
        } else {
            self.set(key, [elem])
        }
    }
}
