import Foundations { print, Option }

let a = match 3 {
    1 => "a",
    2 => "b",
    3 => "c",
}

let b = match (9, 7) {
    (2, 3) => 1,
    (2, _) => 2,
    (a, b) => a * b,
}

let c = match "yolo" {
    "yo" => 1,
    "lo" => 2,
    "yolo" => 3,
    _ => 4,
}

let d = match 3 * 7 == 21 {
    true => (2, 3, 5),
    false => (7, 11, 13),
}

let e = if 1 == 0 { 1 } else if 1 == 1 { 2 } else { 3 }

let f = .some(3).map(n -> n * 7)
let g = .none

struct Yolo { a: Num, b: (Num, Num) }

let h = match (Yolo { a: 2, b: (3, 5) }, (7, (11, (13, 17)))) {
    ({ a, b: (b, c) }, (d, (e, (f, g)))) => a * b * c * d * e * f * g,
}

let i = use (pi, d) = (3.1415926, 22) in d / pi
let (j, (k, l)) = (3, ("yo", true))

struct Vec2 { x: Num, y: Num }

extend Vec2 {
    fun add({ x, y }: Vec2) {
        Vec2 { x: self.x + x, y: self.y + y }
    }
}

let m = Vec2 { x: 3, y: 5 }.add(Vec2 { x: 7, y: 11 })

print((a, b, c, d, e, f, g, f.isSome(), g.isNone(), h, i, j, k, l, m))
