import Euler { euler1 }
import Foundations { print }

declare let showType: _ -> Str

struct Person {
    name: Str,
    age: Num,
    city: Str,
}

extend Person {
    static fun init(name, age, city) {
        Person { name: name, age: age, city: city }
    }
}

extend () {
    let isUnit = true
}

extend<a> Tuple<a> {
    let isUnit = false
}

extend Person {
    fun canDrive() {
        self.age >= 18
    }
}

let nathalie = Person { name: "Nathalie", age: 25, city: "Paris" }
let nathan = Person("Nathan", 24, "Paris")

let {
    a = 3 * 7 + 2
    f = n -> n * n
    id = x -> x
}

fun fact(n) {
    if n == 0 { 1 } else { use pred = n - 1 in n * fact(pred) }
}

module A {
    let a = 3
    module B {
        let b = 7
        module C {
            let c = 11
        }
    }
}

declare module Math {
    fun sqrt(x: Num): Num
    fun cbrt(x: Num): Num
    fun min(a: Num, b: Num): Num
    fun max(a: Num, b: Num): Num
    fun floor(x: Num): Num
    fun ceil(x: Num): Num
    fun round(x: Num): Num
}

let y = use sum = A.a + A.B.b + A.B.C.c in Math.sqrt(fact(sum))
let x = { let x = 3; let y = 7; x * { let x = 11; let y = 17; x + y } - y } + y

extend Num {
    fun isPrime() {
        if self == 2 { return true }
        if self < 2 or self mod 2 == 0 { return false }
        mut i = 3

        while i * i <= self {
            if self mod i == 0 {
                return false
            }

            i += 2
        }

        true
    }

    fun sqrt() { Math.sqrt(self) }
    fun floor() { Math.floor(self) }
    fun ceil() { Math.ceil(self) }
    fun round() { Math.round(self) }
}

extend Str[] {
    declare {
        fun join(sep: Str): Str
    }
}

extend<a> a[] {
    static fun init(): Self { [] }
    
    declare {
        let length: Num
        fun at(index: Num): a
        fun push(elem: a): ()
        fun pop(): Option<a>
        fun filter(predicate: a -> Bool): a[]
        fun map<b>(f: a -> b): b[]
        fun flatMap<b>(f: a -> b[]): b[]
        fun find(predicate: a -> Bool): Option<a>
        fun findIndex(predicate: a -> Bool): Option<Num>
        fun forEach(f: a -> ()): ()
        fun slice(start: Num, end: Num): a[]
        fun includes(value: a): Bool
        fun some(predicate: a -> Bool): Bool
        fun every(predicate: a -> Bool): Bool
    }

    fun first() {
        self.at(0)
    }

    fun lastIndex(): Num {
        self.length - 1
    }

    fun last() {
        self.at(self.length - 1)
    }

    fun reverse() {
        mut rev = []
        mut i = self.lastIndex()

        while i >= 0 {
            rev.push(self.at(i))
            i -= 1
        }

        rev
    }

    fun sum() {
        mut total = 0
        mut i = 0

        while i < self.length {
            total += self.at(i)
            i += 1
        }

        total
    }

    fun product() {
        mut total = 1
        mut i = 0

        while i < self.length {
            total *= self.at(i)
            i += 1
        }

        total 
    }

    fun isEmpty(): Bool {
        self.length == 0
    }

    fun count(predicate: a -> Bool): Num {
        mut count = 0
        mut i = 0

        while i < self.length {
            if predicate(self.at(i)) {
                count += 1
            }

            i += 1
        }

        count
    }

    fun zip(other) {
        let len = Math.min(self.length, other.length)
        mut res = []
        mut i = 0

        while i < len {
            res.push((self.at(i), other.at(i)))
            i += 1
        }

        res
    }

    fun joinWith(fmt, sep) {
        self.map(fmt).join(sep)
    }
}

fun range(start: Num, end: Num): Num[] {
    mut rng = []
    mut i = start

    while i < end {
        rng.push(i)
        i += 1
    }

    rng
}

extend Str {
    declare {
        fun startsWith(str: Str): Bool
        fun endsWith(str: Str): Bool
        fun includes(str: Str): Bool
    }
}

extend<a, b> (a[], b[]) {
    fun zip() {
        self.0.zip(self.1)
    }
}

extend<a, b> (a, b)[] {
    fun unzip() {
        mut i = 0
        mut as = []
        mut bs = []

        while i < self.length {
            let pair = self.at(i)
            as.push(pair.0) 
            bs.push(pair.1) 
            i += 1
        }

        (as, bs)
    }
}

fun factorial(n) { range(1, n + 1).product() }

let zipped = [1, 2, 3].zip(["a", "b", "c"])
print(zipped)
print(zipped.unzip())
print([1, 2, 3].sum())
print(_[]::sum(range(1, 100 + 1)))
print(factorial(11))
