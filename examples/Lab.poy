import Euler { euler1 }
import Foundations
import List { IsEmpty }

struct Person {
    name: Str,
    age: Num,
    city: Str,
}

extend Person {
    static fun init(name, age, city) {
        Person { name: name, age: age, city: city }
    }
}

extend () {
    let isUnit = true
}

extend<a> Tuple<a> {
    let isUnit = false
}

extend Person {
    fun canDrive() {
        self.age >= 18
    }
}

let nathalie = Person { name: "Nathalie", age: 25, city: "Paris" }
let nathan = Person("Nathan", 24, "Paris")

let {
    a = 3 * 7 + 2
    f = n -> n * n
    id = x -> x
}

fun fact(n) {
    if n == 0 { 1 } else { use pred = n - 1 in n * fact(pred) }
}

module A {
    let a = 3
    module B {
        let b = 7
        module C {
            let c = 11
        }
    }
}

let y = use sum = A.a + A.B.b + A.B.C.c in Math.sqrt(fact(sum))
let x = { let x = 3; let y = 7; x * { let x = 11; let y = 17; x + y } - y } + y

extend Num {
    fun isPrime() {
        if self == 2 { return true }
        if self < 2 or self mod 2 == 0 { return false }
        mut i = 3

        while i * i <= self {
            if self mod i == 0 {
                return false
            }

            i += 2
        }

        true
    }
}

fun rangeArray(start: Num, end: Num): Num[] {
    mut rng = []
    mut i = start

    while i < end {
        rng.push(i)
        i += 1
    }

    rng
}

extend<a, b> (a[], b[]) {
    fun zip() {
        self.0.zip(self.1)
    }
}

extend<a, b> (a, b)[] {
    fun unzip() {
        mut i = 0
        mut as = []
        mut bs = []

        while i < self.length {
            let pair = self.at(i)
            as.push(pair.0) 
            bs.push(pair.1) 
            i += 1
        }

        (as, bs)
    }
}

fun factorial(n) { rangeArray(1, n + 1).product() }

let zipped = [1, 2, 3].zip(["a", "b", "c"])
print(zipped)
print(zipped.unzip())
print([1, 2, 3].sum())
print(_::sum(rangeArray(1, 100 + 1)))
print(factorial(11))

type {
    Not<True> = False
    Not<False> = True
}

declare let test: Not<IsEmpty<Parameters<@typeOf<factorial>>>>

let numArray = Num[]()

print(typeOf(test).show())
print(typeOf(_::sum).show())
print(typeOf(numArray).show())
print(.some(3 * 7))
