
extend<a> Iterator<a> {
    fun map(f) {
        for v in self {
            yield f(v)
        }
    }

    fun filter(pred) {
        for v in self {
            if pred(v) {
                yield v
            }
        }
    }

    fun sum() {
        mut total = 0

        for v in self {
            total += v
        }

        total
    }

    fun prod() {
        mut res = 1

        for v in self {
            res *= v
        }

        res
    }

    fun toArray() {
        mut res = []

        for v in self {
            res.push(v)
        }

        res
    }

    fun findIndex(pred: a -> Bool) {
        mut i = 0

        for v in self {
            if pred(v) {
                return i
            }

            i += 1
        }

        -1
    }
}

fun factorial(n) {
    range(2, n + 1).prod()
}

fun solve(a: Num) {
    mut lo = 0
    mut hi = 144
    mut mid = 0
    let eps = 10 ** -12
    let f = x -> x ** x - a

    while Math.abs(hi - lo) > eps {
        mid = (lo + hi) / 2

        if f(mid) >= 0 {
            hi = mid
        } else {
            lo = mid
        }
    }

    mid
}

#new("Map")
declare fun initMap(): Map<_, _>

#new("Map")
declare fun initMapFromEntries<k, v>(entries: Iterator<(k, v)>): Map<k, v>

extend Map {
    static fun init() {
        initMap()
    }
}

extend<k, v> Map<k, v> {
    declare {
        fun get(key: k): v
        fun set(key: k, value: v): ()
        fun has(key: k): Bool
        let size: Num
        fun keys(): Iterator<k>
        fun values(): Iterator<v>
        fun entries(): Iterator<(k, v)>
    }

    static fun init() {
        initMap()
    }

    static fun fromEntries(entries) {
        initMapFromEntries(entries)
    }

    fun map<k2, v2>(f: (k, v) -> (k2, v2)): Map<k2, v2> {
        initMapFromEntries(self.entries().map(kv -> f(kv.0, kv.1)))
    }

    fun mapKeys<k2>(f: (k, v) -> k2): Map<k2, v> {
        initMapFromEntries(self.entries().map(kv -> {
            let k = kv.0
            let v = kv.1
            let k2 = f(k, v)

            (k2, v)
        }))
    }

    fun mapValues<v2>(f: (k, v) -> v2): Map<k, v2> {
        initMapFromEntries(self.entries().map(kv -> {
            let k = kv.0
            let v = kv.1
            let v2 = f(k, v)

            (k, v2)
        }))
    }
}

extend <k, e> Map<k, e[]> {
    fun push(key, elem) {
        if self.has(key) {
            self.get(key).push(elem)
        } else {
            self.set(key, [elem])
        }
    }
}

extend Num {
    fun `+`(n) {
        self + n
    }
}

mut m = Map()
m.push("hello", 1)
m.push("world", 2)
m.push("hello", 7)

print(use x = solve(5.9722 * 10 ** 24) in (x, x ** x))
print([1, 2, 3][-1])
print(3.`+`(7))
print(Num::`+`(3, 7))
print([[1, 2, 3]][0][0])
