
pub struct Console {
    log: _ -> (),
    warn: _ -> (),
    info: _ -> (),
    error: _ -> (),
    time: Str -> (),
    timeEnd: Str -> (),
    clear: () -> (),
}

pub declare let console: Console
pub let print = console.log

pub type {
    ReturnType<Function<_, ret>> = ret
    Parameters<Function<args, _>> = args
    ElementType<a[]> = a
}

pub declare module Math {
    fun sqrt(x: Num): Num
    fun cbrt(x: Num): Num
    fun min(a: Num, b: Num): Num
    fun max(a: Num, b: Num): Num
    fun floor(x: Num): Num
    fun ceil(x: Num): Num
    fun round(x: Num): Num
    fun abs(x: Num): Num
    fun pow(x: Num, y: Num): Num
    fun random(): Num
    fun log(x: Num): Num
    fun log2(x: Num): Num
    fun log10(x: Num): Num
    fun exp(x: Num): Num
    fun cos(x: Num): Num
    fun sin(x: Num): Num
    fun tan(x: Num): Num
    fun acos(x: Num): Num
    fun asin(x: Num): Num
    fun atan(x: Num): Num
    fun atan2(y: Num, x: Num): Num
    fun hypot(x: Num, y: Num): Num
    fun sign(x: Num): Num
}

pub enum Option<t> { none, some(t) }

extend<a> Option<a> {
    fun isSome() {
        match self {
            .some(_) => true,
            .none => false,
        }
    }

    fun isNone() {
        match self {
            .none => true,
            _ => false,
        }
    }

    fun map(f) {
        match self {
            .some(x) => Option.some(f(x)),
            .none => Option.none,
        }
    }

    fun flatMap(f) {
        match self {
            .some(x) => f(x),
            .none => Option.none,
        }
    }

    fun orDefault(default) {
        match self {
            .some(x) => x,
            .none => default,
        }
    }
}

pub fun range(from: Num, to: Num) {
    mut i = from

    while i < to {
        yield i
        i += 1
    }
}